/**
 * Admin Notification Types
 * 관리자 실시간 알림 시스템을 위한 타입 정의
 */

export interface AdminNotification {
  id: string;
  type: AdminNotificationType;
  priority: AdminNotificationPriority;
  category: NotificationCategory;
  title: string;
  message: string;
  actionUrl?: string;
  actionLabel?: string;
  isRead: boolean;
  metadata: NotificationMetadata;
  createdAt: Date;
  expiresAt?: Date;
  acknowledgedAt?: Date;
  acknowledgedBy?: string; // Admin user ID
}

export enum AdminNotificationType {
  // 출금 관련
  WITHDRAWAL_PENDING = "withdrawal_pending",
  WITHDRAWAL_AML_FLAG = "withdrawal_aml_flag",
  WITHDRAWAL_FAILED = "withdrawal_failed",
  WITHDRAWAL_COMPLETED = "withdrawal_completed",

  // 입금 관련
  DEPOSIT_RECEIVED = "deposit_received",
  DEPOSIT_AML_FLAG = "deposit_aml_flag",
  DEPOSIT_RETURNED = "deposit_returned",
  TRAVEL_RULE_VIOLATION = "travel_rule_violation",

  // 볼트 관련
  VAULT_REBALANCING_NEEDED = "vault_rebalancing_needed",
  VAULT_REBALANCING_COMPLETED = "vault_rebalancing_completed",
  VAULT_HOT_WALLET_LOW = "vault_hot_wallet_low",
  VAULT_SECURITY_ALERT = "vault_security_alert",

  // 회원사 관련
  MEMBER_ONBOARDING_PENDING = "member_onboarding_pending",
  MEMBER_SUSPENDED = "member_suspended",
  MEMBER_ADDRESS_FLAGGED = "member_address_flagged",

  // 시스템 관련
  SYSTEM_ERROR = "system_error",
  SYSTEM_MAINTENANCE = "system_maintenance",
  SECURITY_ALERT = "security_alert",
  COMPLIANCE_ALERT = "compliance_alert",

  // 관리자 관련
  ADMIN_LOGIN_SUSPICIOUS = "admin_login_suspicious",
  ADMIN_SESSION_EXPIRING = "admin_session_expiring",
  PERMISSION_CHANGED = "permission_changed"
}

export enum AdminNotificationPriority {
  CRITICAL = "critical",    // 🔴 Red - 즉각 조치 필요
  HIGH = "high",           // 🟡 Yellow - 1시간 내 조치
  NORMAL = "normal",       // 🔵 Blue - 당일 내 확인
  LOW = "low"             // ⚪ Gray - 참고용
}

export enum NotificationCategory {
  SECURITY = "security",
  COMPLIANCE = "compliance",
  OPERATIONS = "operations",
  SYSTEM = "system",
  MEMBER = "member",
  FINANCIAL = "financial"
}

export interface NotificationMetadata {
  // 연관된 리소스 정보
  memberId?: string;
  memberName?: string;
  withdrawalId?: string;
  depositId?: string;
  vaultId?: string;
  transactionId?: string;

  // 수치 정보
  amount?: string;
  amountInKRW?: string;
  assetSymbol?: string;

  // 상태 정보
  previousStatus?: string;
  currentStatus?: string;

  // 위험도 정보
  riskScore?: number;
  alertLevel?: string;

  // 추가 컨텍스트
  ipAddress?: string;
  userAgent?: string;
  location?: string;

  // 자동화 정보
  isAutoGenerated: boolean;
  sourceSystem?: string;
  correlationId?: string;
}

// 알림 설정
export interface AdminNotificationSettings {
  userId: string;
  globalEnabled: boolean;
  channelSettings: NotificationChannelSettings[];
  typeSettings: NotificationTypeSettings[];
  scheduleSettings: NotificationScheduleSettings;
  updatedAt: Date;
}

export interface NotificationChannelSettings {
  channel: NotificationChannel;
  enabled: boolean;
  priorityFilter: AdminNotificationPriority[];
  categoryFilter: NotificationCategory[];
  endpoint?: string; // Email, Slack webhook, etc.
}

export enum NotificationChannel {
  WEB_PUSH = "web_push",     // 브라우저 알림
  EMAIL = "email",           // 이메일
  SLACK = "slack",           // Slack 메시지
  SMS = "sms",               // SMS (긴급용)
  TELEGRAM = "telegram",     // Telegram 메시지
  WEBHOOK = "webhook"        // 커스텀 웹훅
}

export interface NotificationTypeSettings {
  type: AdminNotificationType;
  enabled: boolean;
  channels: NotificationChannel[];
  autoAcknowledge: boolean;
  escalationMinutes?: number; // 미확인 시 상급자에게 에스컬레이션
}

export interface NotificationScheduleSettings {
  businessHoursOnly: boolean;
  businessHours: {
    start: string; // "09:00"
    end: string;   // "18:00"
    timezone: string;
  };
  weekendsEnabled: boolean;
  holidaysEnabled: boolean;
  doNotDisturbHours?: {
    start: string; // "22:00"
    end: string;   // "07:00"
  };
}

// 알림 통계 및 분석
export interface NotificationStats {
  timeRange: {
    start: Date;
    end: Date;
  };
  totalCount: number;
  unreadCount: number;
  byPriority: Record<AdminNotificationPriority, number>;
  byCategory: Record<NotificationCategory, number>;
  byType: Record<AdminNotificationType, number>;
  responseTimeStats: {
    averageAcknowledgeTime: number; // minutes
    medianAcknowledgeTime: number;
    overdueCount: number;
  };
  escalationStats: {
    totalEscalations: number;
    escalationRate: number; // %
    avgEscalationTime: number; // minutes
  };
}

// 알림 액션
export interface NotificationAction {
  id: string;
  label: string;
  type: NotificationActionType;
  style: ActionStyle;
  url?: string;
  confirmationRequired: boolean;
  confirmationMessage?: string;
  requiredPermissions?: string[];
}

export enum NotificationActionType {
  NAVIGATE = "navigate",     // 페이지 이동
  API_CALL = "api_call",     // API 호출
  MODAL = "modal",           // 모달 열기
  ACKNOWLEDGE = "acknowledge", // 확인 처리
  DISMISS = "dismiss"        // 무시
}

export enum ActionStyle {
  PRIMARY = "primary",       // 주요 액션
  SECONDARY = "secondary",   // 보조 액션
  SUCCESS = "success",       // 성공 액션
  WARNING = "warning",       // 경고 액션
  DANGER = "danger"          // 위험 액션
}

// 알림 템플릿
export interface NotificationTemplate {
  id: string;
  type: AdminNotificationType;
  title: string;
  message: string;
  priority: AdminNotificationPriority;
  category: NotificationCategory;
  actions?: NotificationAction[];
  variables: string[]; // 템플릿 변수 목록
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// 알림 규칙 엔진
export interface NotificationRule {
  id: string;
  name: string;
  description: string;
  conditions: NotificationCondition[];
  actions: NotificationRuleAction[];
  isActive: boolean;
  priority: number; // 규칙 우선순위
  createdAt: Date;
  updatedAt: Date;
  lastTriggered?: Date;
  triggerCount: number;
}

export interface NotificationCondition {
  field: string;
  operator: ConditionOperator;
  value: any;
  logicalOperator?: LogicalOperator; // AND, OR for multiple conditions
}

export enum ConditionOperator {
  EQUALS = "equals",
  NOT_EQUALS = "not_equals",
  GREATER_THAN = "greater_than",
  LESS_THAN = "less_than",
  CONTAINS = "contains",
  NOT_CONTAINS = "not_contains",
  IN = "in",
  NOT_IN = "not_in"
}

export enum LogicalOperator {
  AND = "and",
  OR = "or"
}

export interface NotificationRuleAction {
  type: RuleActionType;
  priority: AdminNotificationPriority;
  channels: NotificationChannel[];
  template?: string;
  customMessage?: string;
  delay?: number; // minutes
  escalate?: boolean;
}

export enum RuleActionType {
  CREATE_NOTIFICATION = "create_notification",
  SEND_EMAIL = "send_email",
  SEND_SLACK = "send_slack",
  CALL_WEBHOOK = "call_webhook",
  ESCALATE = "escalate",
  AUTO_ACKNOWLEDGE = "auto_acknowledge"
}

// 실시간 알림 상태
export interface NotificationState {
  unreadCount: number;
  criticalCount: number;
  lastUpdate: Date;
  connectionStatus: ConnectionStatus;
  subscriptions: NotificationSubscription[];
}

export enum ConnectionStatus {
  CONNECTED = "connected",
  CONNECTING = "connecting",
  DISCONNECTED = "disconnected",
  ERROR = "error"
}

export interface NotificationSubscription {
  userId: string;
  channels: NotificationChannel[];
  filters: NotificationFilter[];
  isActive: boolean;
}

export interface NotificationFilter {
  field: string;
  values: any[];
  exclude: boolean;
}

// API 요청/응답 타입
export interface GetNotificationsRequest {
  limit?: number;
  offset?: number;
  unreadOnly?: boolean;
  priority?: AdminNotificationPriority[];
  category?: NotificationCategory[];
  type?: AdminNotificationType[];
  since?: Date;
}

export interface GetNotificationsResponse {
  notifications: AdminNotification[];
  total: number;
  unreadCount: number;
  hasMore: boolean;
}

export interface AcknowledgeNotificationRequest {
  notificationIds: string[];
  acknowledgedBy: string;
}

export interface NotificationPreferencesRequest {
  settings: Partial<AdminNotificationSettings>;
}